#--------------------------------------------------------------------------
#Air Force Research Laboratory (AFRL) Autonomous Capabilities Team (ACT3)
#Reinforcement Learning Core (CoRL) Safe Autonomy Extension.
#
#This is a US Government Work not subject to copyright protection in the US.
#
#The use, dissemination or disclosure of data in this file is subject to
#limitation or restriction. See accompanying README and LICENSE for details.
#---------------------------------------------------------------------------

"agent": "corl.agents.base_agent.TrainableBaseAgent"
"config": {
    "frame_rate": 0.1,  # Hz
    "parts": [
        {"part": "RateController", "config": {"name": "X Thrust", "property_class": "saferl.platforms.cwh.cwh_properties.ThrustProp", "axis": 0, properties: {name: "x_thrust"}}},
        {"part": "RateController", "config": {"name": "Y Thrust", "property_class": "saferl.platforms.cwh.cwh_properties.ThrustProp", "axis": 1, properties: {name: "y_thrust"}}},
        {"part": "RateController", "config": {"name": "Z Thrust", "property_class": "saferl.platforms.cwh.cwh_properties.ThrustProp", "axis": 2, properties: {name: "z_thrust"}}},
        {"part": "Sensor_Position"},
        {"part": "Sensor_Velocity"},
        {"part": "Sensor_InspectedPoints"},
        {"part": "Sensor_SunAngle"},
        {"part": "Sensor_UninspectedPoints"},
        {"part": "Sensor_EntityPosition", "config": {"name": "reference_position", "entity_name": "chief"}}, # Ensure reference position sensor name consistent with dones and rewards
    ],
    "episode_parameter_provider": {
        "type": "corl.episode_parameter_providers.adr.AdrParameterProvider",
        "config":
          {
            "buffer_size": 1,
            "reward_lower_threshold": 0.8,
            "reward_upper_threshold": 0.9,
            "reward_metric": "rewards_cumulative/blue0_ctrl/ObservedPointsReward_mean",
            "reward_custom_metric": True,
            "warmup_value": 0,
            "warmup_metric": "blue0_ctrl/env/sim_period_mean",
            "warmup_custom_metric": True,
          },
    },
    "simulator_reset_parameters": {
      "radius": {
        "type": "corl.libraries.parameters.UniformParameter",
        "config": {
          "name": "radius",
          "units": "meters",
          "low": 50,
          "high": 100,
        }
      },
      "azimuth_angle": {
        "type": "corl.libraries.parameters.UniformParameter",
        "config": {
          "name": "azimuth_angle",
          "units": "radians",
          "low": 0,
          "high": 6.283,
        }
      },
      "elevation_angle": {
        "type": "corl.libraries.parameters.UniformParameter",
        "config": {
          "name": "elevation_angle",
          "units": "radians",
          "low": -1.57,
          "high": 1.57,
        }
      },
      "vel_max_ratio": {
        "type": "corl.libraries.parameters.UniformParameter",
        "config": {
          "name": "vel_max_ratio",
          "low": 0,
          "high": 0.8,
        }
      },
      "vel_azimuth_angle": {
        "type": "corl.libraries.parameters.UniformParameter",
        "config": {
          "name": "vel_azimuth_angle",
          "units": "radians",
          "low": 0,
          "high": 6.283,
        }
      },
      "vel_elevation_angle": {
        "type": "corl.libraries.parameters.UniformParameter",
        "config": {
          "name": "vel_elevation_angle",
          "units": "radians",
          "low": -1.57,
          "high": 1.57,
        }
      },
    },
    "glues": [
        {
            "functor": "saferl.rta.cwh.inspection_rta_1v1.RTAGlueCWHInspection1v1",
            "config": {
              "state_observation_names": ["ObserveSensor_Sensor_Position", "ObserveSensor_Sensor_Velocity", "ObserveSensor_Sensor_SunAngle"],
              "enabled": False, #set to True to turn RTA on
              # No constraints listed defaults to all constraints active
              # Constraint options: "chief_collision", "rel_vel", "sun", "r_max", "PSM", "x_vel", "y_vel", "z_vel"
              # More details here: https://github.com/act3-ace/run-time-assurance/-/blob/main/run_time_assurance/zoo/cwh/inspection_1v1.py
              "constraints": ["chief_collision", "rel_vel"],
          },
          "references": {
            "step_size": "step_size",
            "collision_radius": "collision_radius",
            "v0": "velocity_threshold",
            "v0_distance": "collision_radius",
            "v1_coef": "vel_limit_slope",
            "n": "mean_motion",
            "r_max": "max_distance",
          },
          "wrapped": [
            {
                "functor": "corl.glues.common.controller_glue.ControllerGlue",
                "config": {
                    "controller": "X Thrust",
                    "training_export_behavior": "EXCLUDE",
                    "normalization": {
                      "enabled": False,
                    }
                },
            },
            {
                "functor": "corl.glues.common.controller_glue.ControllerGlue",
                "config":{
                    "controller": "Y Thrust",
                    "training_export_behavior": "EXCLUDE",
                    "normalization": {
                      "enabled": False,
                    }
                }
            },
            {
                "functor": "corl.glues.common.controller_glue.ControllerGlue",
                "config":{
                  "controller": "Z Thrust",
                  "training_export_behavior": "EXCLUDE",
                  "normalization": {
                    "enabled": False,
                  }
                }
            },
          ],
        },
        {
            "functor": "corl.glues.common.observe_sensor.ObserveSensor",
            "config": {
              "sensor": "Sensor_Position",
              "normalization": {
                "normalizer": "corl.libraries.normalization.StandardNormalNormalizer",
                "config": {
                  "mu": 0.0,
                  "sigma": [100, 100, 100],
                }
              }
            },
        },
        {
            "functor": "corl.glues.common.observe_sensor.ObserveSensor",
            "config": {
              "sensor": "Sensor_Velocity",
              "output_units": ["m/s", "m/s", "m/s"],
              "normalization": {
                "normalizer": "corl.libraries.normalization.StandardNormalNormalizer",
                "config": {
                  "mu": 0.0,
                  "sigma": [0.5, 0.5, 0.5],
              }
            },
          },
        },
        {
            "functor": "corl.glues.common.observe_sensor.ObserveSensor",
            "config": {
              "sensor": "Sensor_InspectedPoints",
              "normalization": {
                "normalizer": "corl.libraries.normalization.StandardNormalNormalizer",
                "config": {
                  "mu": 0.0,
                  "sigma": [100.0],
              },
            },
          },
        },
        {
            "functor": "corl.glues.common.observe_sensor.ObserveSensor",
            "config": {
              "sensor": "Sensor_SunAngle",
              "normalization": {
                  "enabled": False
            },
          },
        },
        {
            "functor": "corl.glues.common.observe_sensor.ObserveSensor",
            "config": {
              "sensor": "Sensor_UninspectedPoints",
              "normalization": {
                  "enabled": False
            },
          },
        },
        {
          "functor": "corl.glues.common.magnitude.MagnitudeGlue",
            "config": {
              "normalization": {
                "normalizer": "corl.libraries.normalization.StandardNormalNormalizer"
              },
            },
            "wrapped": {
                "functor": "corl.glues.common.observe_sensor.ObserveSensor",
                "config":{
                    "sensor": Sensor_Velocity,
                },
            },
        },
        {
            "functor": "saferl.glues.vel_limit_glue.VelocityLimitGlue",
            "config":
              {
                "sensor": "Sensor_Position",
              },
            "references": {
              "velocity_threshold": "velocity_threshold",
              "threshold_distance": "collision_radius",
              "mean_motion": "mean_motion",
              "slope": "vel_limit_slope",
            },
        },
    ],
    "dones": [
        {
            # Max distance from chief
            "functor": "saferl.dones.cwh.common.MaxDistanceDoneFunction",
            "references": {
              "max_distance": "max_distance",
              "reference_position_sensor_name": "reference_position_sensor_name"
            },
        },
        {
            # Crash into chief (exceeded velocity constraint within crashing region)
            "functor": "saferl.dones.cwh.common.CrashDoneFunction",
            "references": {
              "crash_region_radius": "collision_radius",
              "reference_position_sensor_name": "reference_position_sensor_name"
            },
        },
        {
            # Success (inspected all points)
            "functor": "saferl.dones.cwh.inspection_dones.SuccessfulInspectionDoneFunction",
            "config":{},
        },
    ],
    "rewards": [
        {
            # reward = number of newly observed points
            "name": "ObservedPointsReward",
            "functor": "saferl.rewards.cwh.inspection_rewards.ObservedPointsReward",
            "config": {
              "scale": 0.01
            }
        },
        {
            # reward = scale (if all points are inspected)
            "name": "InspectionSuccessReward",
            "functor": "saferl.rewards.cwh.inspection_rewards.InspectionSuccessReward",
            "config": {
              "scale": 1.0,
            }
        },
        {
          # reward = scale (if crash occurs)
          "name": "InspectionCrashOriginReward",
          "functor": "saferl.rewards.cwh.inspection_rewards.InspectionCrashReward",
          "config": {
            "scale": -1.0,
          },
          "references": {
            "crash_region_radius": "collision_radius",
            "reference_position_sensor_name": "reference_position_sensor_name"
          },
        },
        {
          "name": "InspectionDeltaVReward",
          "functor": "saferl.rewards.cwh.inspection_rewards.InspectionDeltaVReward",
          "config": {
            "bias": 0.0,
            "rate": 0.0005,
            "exp_scale": 0.5,
            "step_size": 10,
            "mass": 12.0,
            "mode": "scale",
            "scale": {
              "type": "corl.libraries.parameters.ConstantParameter",
              "config": {
                "value": -0.001,
                "update": {
                  "value": {
                    "type": "corl.libraries.parameters.BoundStepUpdater",
                    "config": {
                      "bound": -0.1,
                      "step": -0.0001,
                      "bound_type": "min",
                    },
                  },
                },
              },
            },
          },
        },
        {
          # reward = scale (if RTA is intervening)
          "name": "InspectionRTAReward",
          "functor": "saferl.rewards.rta_rewards.RTAInterveningReward",
          "config": {
            "scale": -0.01,
          }
        },
    ],
    "reference_store": !include ../parameters/parameters.yml
}
